# Display the library

The library is a stack of cards, face-down. To start with, all included cards except the commander are in the library.

The display of the library is the back of a Magic card (with an effect to make it look like a deep stack) and a count of the number of cards in the library.

For testing purposes, there is also a list of cards in the library, in order. This list is collapsed by default so that you can't see it.

Later, there will be buttons for manipulating the library, starting with "draw"

## Tracking the library

Instead of keeping a count of cards, we need to store a list of cards in the library.

Hmm, this introduces a wrinkle. I like using htmx, but when someone draws from the library, that list needs to change, and we will display the card.

We can keep all the state in the client and send it back to the server on each request.

Or we could do the manipulations on the client, but then we're not in htmx anymore.

Or we could store state on the server, but then I have a more complicated deployment.

## Where am I going with this app anyway?

In the end, I want to be able to save my state, but it doesn't have to be on the server; I'd be happy with cut-and-paste in the client.

It's probably silly to use htmx here, because this is more of an app than a site. Anything we can do on the server is trivial.

As much as I dislike client-side javascript, it's probably worthwhile here.

And while we're making an app with cut-and-pasteable state, it makes a lot of sense to use React. With a top-level State object that flows down.

Do people still use Redux? That's the style of programming needed here.
